# -*- coding: utf-8 -*-
"""Porous_Aluminum_optimization_parameter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EIB_99VlhqCeK1LVcraO0N9INFmDqn5s
"""

# =====================================================
# Machine Learning Optimization for Porous Aluminum
# (Fast Randomized Search Version)
# =====================================================

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score

# -----------------------------
# Step 1. Input Experimental Data
# -----------------------------
data = pd.DataFrame({
    'Al': [90, 87, 80, 77, 70, 67, 60, 57],
    'NaCl': [10, 10, 20, 20, 30, 30, 40, 40],
    'Corn': [0, 3, 0, 3, 0, 3, 0, 3],
    'Porosity': [4.23, 7.45, 13.61, 17.3, 15.46, 21.95, 19.19, 31.45],
    'Strength': [60.37, 39.21, 56.88, 34.24, 40.45, 25.35, 27.83, 4.45]
})

# -----------------------------
# Step 2. Train ML Model
# -----------------------------
X = data[['Al', 'NaCl', 'Corn', 'Porosity']]
y = data['Strength']

rf = RandomForestRegressor(n_estimators=1000, random_state=42)
rf.fit(X, y)

# Model R² score
y_pred = rf.predict(X)
print(f"Model R² Score: {r2_score(y, y_pred):.3f}")

# -----------------------------
# Step 3. Randomized Optimization
# -----------------------------
n_samples = 20000  # number of random points to test

Al_rand = np.random.uniform(55, 90, n_samples)
NaCl_rand = np.random.uniform(10, 40, n_samples)
Corn_rand = np.random.uniform(0, 3, n_samples)
Porosity_rand = np.random.uniform(4, 32, n_samples)

params = pd.DataFrame({
    'Al': Al_rand,
    'NaCl': NaCl_rand,
    'Corn': Corn_rand,
    'Porosity': Porosity_rand
})

params['Pred_Strength'] = rf.predict(params)

# Find best
best = params.loc[params['Pred_Strength'].idxmax()]

# -----------------------------
# Step 4. Display Optimal Parameters
# -----------------------------
print("\n===== OPTIMIZED PROCESS PARAMETERS =====")
print(f"Al (%): {best['Al']:.2f}")
print(f"NaCl (%): {best['NaCl']:.2f}")
print(f"Corn (%): {best['Corn']:.2f}")
print(f"Porosity (%): {best['Porosity']:.2f}")
print(f"Predicted Strength (MPa): {best['Pred_Strength']:.2f}")

import numpy as np, pandas as pd, matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.ensemble import RandomForestRegressor

# retrain quickly
data = pd.DataFrame({
    'Al': [90, 87, 80, 77, 70, 67, 60, 57],
    'NaCl': [10, 10, 20, 20, 30, 30, 40, 40],
    'Corn': [0, 3, 0, 3, 0, 3, 0, 3],
    'Porosity': [4.23, 7.45, 13.61, 17.3, 15.46, 21.95, 19.19, 31.45],
    'Strength': [60.37, 39.21, 56.88, 34.24, 40.45, 25.35, 27.83, 4.45]
})
X, y = data[['Al','NaCl','Corn','Porosity']], data['Strength']
rf = RandomForestRegressor(n_estimators=1000, random_state=42).fit(X, y)

# Generate grid
NaCl, Por = np.meshgrid(np.linspace(10,40,40), np.linspace(4,32,40))
Al_fixed, Corn_fixed = 89.5, 1
pred = rf.predict(pd.DataFrame({'Al':Al_fixed, 'NaCl':NaCl.ravel(),
                                'Corn':Corn_fixed, 'Porosity':Por.ravel()}))
Z = pred.reshape(NaCl.shape)

# Plot 3D surface
fig = plt.figure(figsize=(8,6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(NaCl, Por, Z, cmap='viridis', alpha=0.8)
ax.set_xlabel('% NaCl')
ax.set_ylabel('Porosity (%)')
ax.set_zlabel('Predicted Strength (MPa)')
ax.set_title('3D Surface: Predicted Strength vs NaCl and Porosity\n(Al=89.5%, Corn=1%)')
plt.show()